<?php
/**
 * @file A11y accessibiliy toolkit module to help people.
 */

/**
 * Implements hook_permission().
 */
function a11y_permission() {
  return array(
    'view a11y simulations' =>  array(
      'title' => t('View A11y simulations'),
      'description' => t('User can see the different simulators that the a11y module provides. These are intended to help people understand different accessibility concerns and should not be enabled for general site users unless the intention is teaching about the different conditions.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function a11y_block_info() {
  $blocks['a11y'] = array(
    'info' => t('Accessibility suite'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function a11y_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'a11y':
      $block['subject'] = t('Accessibility options');
      $block['content'] = a11y_a11y_block();
      break;
  }
  return $block;
}

/**
 * Renders the default a11y block.
 */
function a11y_a11y_block() {
  // apply the css / js as selected
  a11y_apply_a11y();
  $output = '';
  if (variable_get('a11y_opendyslexic', 1)) {
    // textsize default state
    $opendyslexic = array(
      '#type' => 'checkbox',
      '#id' => 'a11y_opendyslexic_checkbox',
      '#title' => t('Optimize fonts for dyslexia'),
      '#default_value' => 0,
      '#description' => t('This loads a font easier to read for people with dyslexia.'),
    );
    $output .= drupal_render($opendyslexic);
  }
  if (variable_get('a11y_contrast', 1)) {
    $contrast = array(
      '#type' => 'checkbox',
      '#id' => 'a11y_contrast_checkbox',
      '#title' => t('High contrast mode'),
      '#default_value' => 0,
      '#description' => t('This renders the document in high contrast mode.'),
    );
    $output .= drupal_render($contrast);
    $invert = array(
      '#type' => 'checkbox',
      '#id' => 'a11y_invert_checkbox',
      '#title' => t('Invert colors'),
      '#default_value' => 0,
      '#description' => t('This renders the document as white on black'),
    );
    $output .= drupal_render($invert);
  }
  if (variable_get('a11y_textsize', 1)) {
    $icon_path = base_path() . drupal_get_path('module', 'a11y') . '/plugins/icons/';
    $output .= '<div class="a11y-textsize-controls"><a href="#" onclick="Drupal.a11y.textsize(-1);" class="a11y-operation-icons a11y-decrease">
      <img alt="' . t('Decrease text size') . '" title="' . t('Decrease text size') . '" src="' . $icon_path . 'text-decrease.png" />
    </a>
    <a href="#" onclick="Drupal.a11y.textsize(1);" class="a11y-operation-icons a11y-increase">
      <img alt="' . t('Increase text size') . '" title="' . t('Increase text size') . '" src="' . $icon_path . 'text-increase.png" />
    </a>
    <a href="#" onclick="Drupal.a11y.textsize(0);" class="a11y-operation-icons a11y-reset">
      <img alt="' . t('Reset text size') . '" title="' . t('Reset text size') . '" src="' . $icon_path . 'text-reset.png" />
    </a></div>';
  }
  // add in the simulations if they are allowed to see them
  if (user_access('view a11y simulations')) {
    $sim = array(
      '#type' => 'fieldset',
      '#title' => t('Simulators'),
      '#description' => t('Simulate different accessibility conditions. This is useful to see how your site would possibly be viewed by people with different conditions.'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );
    if (variable_get('a11y_sim_dyslexia', 1)) {
      $sim['dyslexia'] = array(
        '#type' => 'checkbox',
        '#id' => 'a11y_sim_dyslexia_checkbox',
        '#title' => t('Dyslexia'),
        '#default_value' => 0,
        '#description' => t('This will simulate how a dyslexic might view your material.'),
      );
    }
    $output .= drupal_render($sim);
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function a11y_menu() {
  $items['admin/config/system/a11y'] = array(
    'title' => 'Accessibility settings',
    'description' => 'Change which accessibility settings to apply.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('a11y_admin_settings'),
    'access callback' => '_cis_connector_role_groupings',
    'access arguments' => array(array('teacher', 'staff')),
  );

  return $items;
}

/**
 * Admin settings form.
 */
function a11y_admin_settings($form, &$form_state) {
  $form['sim'] = array(
    '#type' => 'fieldset',
    '#title' => t('Simulators'),
    '#description' => t('Allow for simulating different accessibility issues. This is useful to see how your site would possibly be viewed by people with different conditions. This is a mode intended for developers and site builders as the modes produce accessibility issues by design to help you empathize.'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['sim']['a11y_sim_dyslexia'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow dyslexia simulator'),
    '#default_value' => variable_get('a11y_sim_dyslexia', 1),
    '#description' => t('This produces an effect to content that attempts to simulate the affects of dyslexia'),
    '#required' => FALSE,
  );
  $form['config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Button configuration'),
    '#description' => t('Which accessibility options appear in the block.'),
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
  );
  // domain default state
  $form['config']['a11y_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie domain'),
    '#default_value' => variable_get('a11y_domain', ''),
    '#description' => t('Define the scope of the accessibility settings. This way you can keep UX patterns the same across subdomains for example.'),
    '#required' => FALSE,
  );
  // opendyslexic default state
  $form['config']['a11y_opendyslexic'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow open dyslexic font'),
    '#default_value' => variable_get('a11y_opendyslexic', 1),
    '#description' => t('This loads a css file that allows the user to forcibly override the font used by your site to be Open dyslexic, a font developed for those with dyslexia. You can find out more at http://opendyslexic.org/'),
    '#required' => FALSE,
  );
  // contrast default state
  $form['config']['a11y_contrast'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow contrast'),
    '#default_value' => variable_get('a11y_contrast', 1),
    '#description' => t('Allow the user to adjust the contrast of your site.'),
    '#required' => FALSE,
  );
  // textsize default state
  $form['config']['a11y_textsize'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Text resize'),
    '#default_value' => variable_get('a11y_textsize', 1),
    '#description' => t('Allow the user to adjust the text size of your content.'),
    '#required' => FALSE,
  );
  return system_settings_form($form);
}

/**
 * Callback to load the right js / css needed for supported plugins.
 */
function a11y_apply_a11y() {
  drupal_add_library('system', 'jquery.cookie');
  drupal_add_js(drupal_get_path('module', 'a11y') . '/a11y.js');
  // pass variables to js
  $js_variables = array(
    'a11y' => array(
      'path' => base_path() . drupal_get_path('module', 'a11y') . '/',
      'domain' => variable_get('a11y_domain', ''),
      'factor' => 1,
    ),
  );
  $plugin_path = drupal_get_path('module', 'a11y') . '/plugins/';
  $sim_path = drupal_get_path('module', 'a11y') . '/simulations/';
  if (variable_get('a11y_opendyslexic', 1)) {
    $js_variables['a11y']['opendyslexic'] = 1;
    drupal_add_js($plugin_path . 'opendyslexic/opendyslexic.js');
  }
  if (variable_get('a11y_contrast', 1)) {
    $js_variables['a11y']['contrast'] = 1;
    drupal_add_js($plugin_path . 'contrast/contrast.js');
  }
  if (variable_get('a11y_textsize', 1)) {
    $js_variables['a11y']['textsize'] = 1;
    drupal_add_js($plugin_path . 'textsize/textsize.js');
  }
  if (variable_get('a11y_sim_dyslexia', 1)) {
    $js_variables['a11y']['sim']['dyslexia'] = 1;
    drupal_add_js($sim_path . 'dyslexia/dyslexia.js');
  }
  drupal_add_js($js_variables, 'setting');
}

/**
 * Implements hook_fa_a11y().
 * Returns the accessibility block to foundation access.
 */
function a11y_fa_a11y() {
  return array(0 => a11y_a11y_block());
}
